{% comment %}
Create form populated by collection's product types and product tags

Accepts:
- collection: {Object} Collection Liquid object (required)

Usage:
{% render 'collection-filter', collection: collection %}
{% endcomment %}
{% assign separator = settings.filter__separator %}

{% comment %}Sanitize input to be case insensitive and strip additional spaces and remove repeats{% endcomment %}
{% assign categories = settings.filter__prefix | remove: ' ' | downcase | split: ',' | uniq %}

<aside class="collection__filter filter">

    <section class="filter__selected-tags"></section>

    <form class="filter__form">
        <h2 class="filter__title">Filter</h2>
        <ul class="filter__categories">
            {% for category in categories %}
                {% render 'filter-category', tags: collection.all_tags, category: category %}
            {% endfor %}
        </ul>

        <input type="submit" value="Filter products" class="filter__submit btn btn--disabled" disabled>

    </form>
    
</aside>

<script>

    {% comment %} 
        Populate tag counts------------------------------------------------------
    {% endcomment %}
    const tagCounts = document.querySelectorAll('.category__tag-count');

    tagCounts.forEach(tag => {
        const allProducts = {{collection.all_products | json}};
        const matchingProducts = allProducts.filter(product => product.tags.includes(tag.dataset.tag));
        tag.innerText = `(${matchingProducts.length})`;
    });



    {% comment %}
        Handle form submit--------------------------------------------------------
    {% endcomment %}
    const form = document.querySelector('.filter__form');
    const tags = document.querySelectorAll('.category__checkbox');

    form.addEventListener('submit', (e) => {
        e.preventDefault();
        window.location.href = generatePath();
    });


    {% comment %}
        Update submit button state when changes made to form----------------------
    {% endcomment %}
    const submitBtn = document.querySelector('.filter__submit');
    const state = document.querySelectorAll('.category__checkbox:checked');
    
    form.addEventListener('change', () => {
        const newState = document.querySelectorAll('.category__checkbox:checked');
        (!formStateChanged(state, newState)) ? changeSubmitBtnState(submitBtn, 'btn--disabled', 'btn--default', false) : changeSubmitBtnState(submitBtn, 'btn--default', 'btn--disabled', true);
    })



    {% comment %}
        Change the appearance and state of the submit button by changing classes and toggling the disabled attribute
        @param {Element} submitBtn - Submit button
        @param {String} state - Class name of current state
        @param {String} newState - Class name of new state
        @param {Boolean} isDisabled - New value of submitBtn disabled attribute
    {% endcomment %}
    function changeSubmitBtnState(submitBtn, state, newState, isDisabled) {
        submitBtn.classList.remove(state);
        submitBtn.classList.add(newState);
        submitBtn.disabled = isDisabled;
    }


    {% comment %}
        Check if state of form has changed by comparing the initial checked inputs with the current checked inputs
        @param {NodeList} state - Initial checked inputs
        @param {NodeList} newState - Current checked inputs
        @return {Boolean} if contents of state and newState the same, return false
    {% endcomment %}
    function formStateChanged(state, newState) {
        if (state.length !== newState.length) return false;
        for (let i = 0; i < state.length; i++) {
            if (state[i] !== newState[i]) return false;
        }
        return true;
    }

    
    {% comment %}
        Create a new path with the selected product tags
        @return {String} Path containing handles of selected tags and the selected sort option
    {% endcomment %}
    function generatePath() {
        const selectedTags = document.querySelectorAll('.category__checkbox:checked');
        const joinedTagHandles = [...selectedTags].map(tag => tag.dataset.handle).join('+'); 
        const collectionPath = '{{collection.url}}';
        const selectedSort = '{{collection.sort_by}}';
        let result = collectionPath.concat('/', joinedTagHandles);
        if (selectedSort) result = result.concat('?sort_by=', selectedSort);
        return result;
    }

</script>